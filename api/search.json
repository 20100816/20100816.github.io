[{"id":"f60710a1757cbf2c324f6116723484a3","title":"如何使用本站主题","content":"大家好\n","slug":"如何使用本站主题","date":"2023-04-15T05:22:05.000Z","categories_index":"hexo教程","tags_index":"hexo,教程","author_index":"银河"},{"id":"ebca6bdf8d7c625f89692d318dff3d4c","title":"hexo站点建立","content":"大家好\n","slug":"hexo站点建立","date":"2023-04-15T05:21:51.548Z","categories_index":"hexo教程","tags_index":"","author_index":"银河"},{"id":"6a7c7298a4a45d23e98e89370cb7ccb0","title":"LeeCode-1.两数之和","content":"题目链接:跳转链接题目描述：给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target  的那 两个 整数，并返回它们的数组下标。\n你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。\n你可以按任意顺序返回答案。示例 1：\n输入：nums &#x3D; [2,7,11,15], target &#x3D; 9输出：[0,1]解释：因为 nums[0] + nums[1] &#x3D;&#x3D; 9 ，返回 [0, 1] 。示例 2：\n输入：nums &#x3D; [3,2,4], target &#x3D; 6输出：[1,2]示例 3：\n输入：nums &#x3D; [3,3], target &#x3D; 6输出：[0,1]思路及算法最容易想到的方法是枚举数组中的每一个数 x，寻找数组中是否存在 target - x。当我们使用遍历整个数组的方式寻找target - x时，需要注意到每一个位于x之前的元素都经和x匹配过，因此不需要再进行匹配。而每一个元素不能被使用两次，所以我们只需要在 x 后面的元素中寻找 target - x。实例代码：\nclass Solution &#123;\npublic:\n    vector&lt;int&gt; twoSum(vector&lt;int&gt;&amp; nums, int target) &#123;\n        int n &#x3D; nums.size();\n        for (int i &#x3D; 0; i &lt; n; ++i) &#123;\n            for (int j &#x3D; i + 1; j &lt; n; ++j) &#123;\n                if (nums[i] + nums[j] &#x3D;&#x3D; target) &#123;\n                    return &#123;i, j&#125;;\n                &#125;\n            &#125;\n        &#125;\n        return &#123;&#125;;\n    &#125;\n&#125;;","slug":"LeeCode-1-两数之和","date":"2023-04-15T04:59:37.000Z","categories_index":"LeeCode题解","tags_index":"LeeCode,简单题","author_index":"银河"}]