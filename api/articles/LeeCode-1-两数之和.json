{"title":"LeeCode-1.两数之和","uid":"6a7c7298a4a45d23e98e89370cb7ccb0","slug":"LeeCode-1-两数之和","date":"2023-04-15T04:59:37.000Z","updated":"2023-04-16T01:59:35.853Z","comments":true,"path":"api/articles/LeeCode-1-两数之和.json","keywords":null,"cover":null,"content":"<p><strong>题目链接:</strong><a href=\"https://leetcode.cn/problems/two-sum/description/\">跳转链接</a></p>\n<h1 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h1><p>给定一个整数数组 <strong>nums</strong> 和一个整数目标值 <strong>target</strong>，请你在该数组中找出 和为目标值 <strong>target</strong>  的那 两个 整数，并返回它们的数组下标。</p>\n<p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。</p>\n<p>你可以按任意顺序返回答案。<br><strong>示例 1：</strong></p>\n<p><strong>输入</strong>：nums &#x3D; [2,7,11,15], target &#x3D; 9<br><strong>输出</strong>：[0,1]<br>解释：因为 nums[0] + nums[1] &#x3D;&#x3D; 9 ，返回 [0, 1] 。<br><strong>示例 2：</strong></p>\n<p><strong>输入</strong>：nums &#x3D; [3,2,4], target &#x3D; 6<br><strong>输出</strong>：[1,2]<br><strong>示例 3：</strong></p>\n<p><strong>输入</strong>：nums &#x3D; [3,3], target &#x3D; 6<br><strong>输出</strong>：[0,1]</p>\n<h1 id=\"思路及算法\"><a href=\"#思路及算法\" class=\"headerlink\" title=\"思路及算法\"></a>思路及算法</h1><p>​        最容易想到的方法是枚举数组中的每一个数 <strong>x</strong>，寻找数组中是否存在 <strong>target - x</strong>。当我们使用遍历整个数组的方式寻找<strong>target - x</strong>时，需要注意到每一个位于<strong>x</strong>之前的元素都经和<strong>x</strong>匹配过，因此不需要再进行匹配。而每一个元素不能被使用两次，所以我们只需要在 <strong>x</strong> 后面的元素中寻找 <strong>target - x</strong>。</p>\n<h1 id=\"实例代码\"><a href=\"#实例代码\" class=\"headerlink\" title=\"实例代码\"></a>实例代码</h1><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">class Solution &#123;\npublic:\n    vector&lt;int&gt; twoSum(vector&lt;int&gt;&amp; nums, int target) &#123;\n        int n &#x3D; nums.size();\n        for (int i &#x3D; 0; i &lt; n; ++i) &#123;\n            for (int j &#x3D; i + 1; j &lt; n; ++j) &#123;\n                if (nums[i] + nums[j] &#x3D;&#x3D; target) &#123;\n                    return &#123;i, j&#125;;\n                &#125;\n            &#125;\n        &#125;\n        return &#123;&#125;;\n    &#125;\n&#125;;</code></pre>","feature":true,"text":"题目链接:跳转链接 题目描述给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target 的那 两个 整数，并返回它们的数组下标。 你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。 你可以按任意顺序返回答...","link":"","photos":[],"count_time":{"symbolsCount":992,"symbolsTime":"1 mins."},"categories":[{"name":"LeeCode题解","slug":"LeeCode题解","count":1,"path":"api/categories/LeeCode题解.json"}],"tags":[{"name":"LeeCode","slug":"LeeCode","count":1,"path":"api/tags/LeeCode.json"},{"name":"简单题","slug":"简单题","count":1,"path":"api/tags/简单题.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0\"><span class=\"toc-text\">题目描述</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%80%9D%E8%B7%AF%E5%8F%8A%E7%AE%97%E6%B3%95\"><span class=\"toc-text\">思路及算法</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E4%BE%8B%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\">实例代码</span></a></li></ol>","author":{"name":"银河","slug":"blog-author","avatar":"../favicon.ico","link":"/","description":"我是一个热爱技术的学生，掌握一些技术。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"hexo站点建立","uid":"ebca6bdf8d7c625f89692d318dff3d4c","slug":"hexo站点建立","date":"2023-04-16T00:52:33.769Z","updated":"2023-04-16T10:55:56.296Z","comments":true,"path":"api/articles/hexo站点建立.json","keywords":null,"cover":null,"text":"1.环境准备下载nodejs和git：git，node在cmd中测试： node -v npm -v git -v 2.安装hexo在cmd中输入： npm install -g hexo-cli 以安装hexo。 安装后输入hexo -v测试。 3.建立hexo博客 建立一个空...","link":"","photos":[],"count_time":{"symbolsCount":601,"symbolsTime":"1 mins."},"categories":[{"name":"hexo教程","slug":"hexo教程","count":2,"path":"api/categories/hexo教程.json"}],"tags":[],"author":{"name":"银河","slug":"blog-author","avatar":"../favicon.ico","link":"/","description":"我是一个热爱技术的学生，掌握一些技术。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{}}